---
#Setting up Hadoop
- name: Create service account for Hadoop
  user: name={{ hadoop_user }}
        system=yes
        state=present
        groups="{{ hadoop_user_groups | join(',') }}"
  tags: ["hadoop-user"]

- name: Create a .ssh Directory.
  file: path=/data/local/home/{{ hadoop_user }}/.ssh owner="{{ hadoop_user }}" group="{{ hadoop_user_groups[0] }}" state=directory mode=0700

- name: Lets copy the template id_rsa to auth_keys location.
  copy: src="{{ role_path }}/../../files/hadoop_id_rsa.pub" dest="/data/local/home/{{ hadoop_user }}/.ssh/authorized_keys" mode=644

- name: Lets copy id_rsa to location .ssh.
  copy: src="{{ role_path }}/../../files/hadoop_id_rsa" dest="/data/local/home/{{ hadoop_user }}/.ssh/id_rsa" mode=600

- name: Lets copy id_rsa.pub to location .ssh.
  copy: src="{{ role_path }}/../../files/hadoop_id_rsa.pub" dest="/data/local/home/{{ hadoop_user }}/.ssh/id_rsa.pub" mode=644

- name: Ensure Hadoop directory exists
  file: path="{{ hadoop_dir }}" state=directory owner={{ hadoop_user }} group={{ hadoop_user_groups[0] }} mode=g+rw

- name: Ensure Hadoop configuration directory exists
  file: path="{{ hadoop_parent_conf_dir }}" state=directory
  tags: ["config"]

- name: Ensure Hadoop log and run directories exist
  file: path="{{ item }}"
        owner={{ hadoop_user }}
        group={{ hadoop_user_groups[0] }}
        mode=0755
        state=directory
  with_items:
    - "{{ hadoop_log_dir }}"
    - "{{ hadoop_run_dir }}"

- stat: path="{{ hadoop_src_dir }}/hadoop-{{ hadoop_version }}.tar.gz"
  register: hadoop_dirs

- name: Remove Hadoop directories if we are installing a new version
  file:
    state: absent
    path: "{{ item }}"
  with_items:
    - "{{ hadoop_usr_parent_dir }}/hadoop-{{ hadoop_version }}/"
    - "{{ hadoop_usr_parent_dir }}/hadoop-{{ hadoop_prev_version }}/"
  when: hadoop_dirs.stat.exists is defined and not hadoop_dirs.stat.exists

- name: Find Hadoop tars to be removed if we are installing a new version.
  find:
    paths: "{{ hadoop_src_dir }}/"
    patterns: "hadoop*"
  register: hadoop_tars_to_delete
  when: hadoop_dirs.stat.exists is defined and not hadoop_dirs.stat.exists

- name: Remove Hadoop tars if we are installing a new version
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ hadoop_tars_to_delete.files }}"
  when: hadoop_dirs.stat.exists is defined and not hadoop_dirs.stat.exists

- name: Remove symlinks
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ hadoop_usr_dir }}"
    - "{{ hadoop_conf_dir }}"
  when: hadoop_dirs.stat.exists is defined and not hadoop_dirs.stat.exists

- name: Remove the shortcuts
  file:
    state: absent
    path: "{{ item }}"
  with_items:
    - /usr/bin/hadoop
    - /usr/bin/hdfs
    - /usr/bin/yarn
  when: hadoop_dirs.stat.exists is defined and not hadoop_dirs.stat.exists

- name: Download Hadoop distribution
  get_url: url="{{ hadoop_mirror }}/hadoop-{{ hadoop_version }}//hadoop-{{ hadoop_version }}.tar.gz"
           dest="{{ hadoop_src_dir }}/hadoop-{{ hadoop_version }}.tar.gz"

- name: Extract Hadoop distribution
  unarchive: src="{{ hadoop_src_dir }}/hadoop-{{ hadoop_version }}.tar.gz"
             dest="{{ hadoop_usr_parent_dir }}"
             copy=no
             creates="{{ hadoop_usr_parent_dir }}/hadoop-{{ hadoop_version }}"

- name: Remove the Hadoop doc dir
  file:
    state: absent
    path: "{{ hadoop_usr_parent_dir }}/hadoop-{{ hadoop_version }}/share/doc/"

- name: Setup Hadoop distribution symlinks
  file: src="{{ item.src }}"
        dest="{{ item.dest }}"
        state=link
  with_items:
    - { src: "{{ hadoop_usr_parent_dir }}/hadoop-{{ hadoop_version }}", dest: "{{ hadoop_usr_dir }}" }
    - { src: "{{ hadoop_usr_parent_dir }}/hadoop-{{ hadoop_version }}/etc/hadoop", dest: "{{ hadoop_conf_dir }}" }
  tags: ["symlinks"]

- name: Create shims for Hadoop binaries
  template: src=hadoop-shim.j2
            dest="/usr/bin/{{ item }}"
            mode=0755
  with_items:
    - hadoop
    - hdfs
    - yarn
  tags: ["shims"]

- name: Configure hadoop env
  template: src=../templates/hadoop-env.sh.j2
            dest="{{ hadoop_conf_dir }}/hadoop-env.sh"

- name: Configure hadoop core-site
  template: src=core-site.xml.j2
            dest="{{ hadoop_conf_dir }}/core-site.xml"

- name: Configure hadoop hdfs-site
  template: src=hdfs-site.xml.j2
            dest="{{ hadoop_conf_dir }}/hdfs-site.xml"

- name: Hadoop config slaves
  template:
    src: slaves.j2
    dest: '{{ hadoop_conf_dir }}/slaves'

- name: Hadoop config masters
  template:
    src: masters.j2
    dest: '{{ hadoop_conf_dir }}/masters'

- name: Copy hadoop-hdfs.systemd
  template: src=hadoop-hdfs.systemd.j2 dest=/etc/systemd/system/hadoop-hdfs.service

- name: Check if namenode exists
  stat:
    path: "{{ hadoop_dir }}/namenode"
  register: stat_result
  tags: ["hdfs_format"] 

- name: Delete namenode if it exists
  file:
   state: absent
   path: "{{ hadoop_dir }}/namenode/"
  when: stat_result.stat.exists == True
  tags: ["hdfs_format"] 

- name: Ensure Hadoop namenode directory exists
  file: path="{{ hadoop_dir }}/namenode" state=directory owner={{ hadoop_user }} group={{ hadoop_user_groups[0] }} mode=700
  when: inventory_hostname in groups['hadoop-namenode']
  tags: ["hdfs_format"] 

- name: Check if datanode exists
  stat:
    path: "{{ hadoop_dir }}/datanode"
  register: stat_result
  tags: ["hdfs_format"] 

- name: Delete datanode if it exists
  file:
   state: absent
   path: "{{ hadoop_dir }}/datanode/"
  when: stat_result.stat.exists == True
  tags: ["hdfs_format"] 

- name: Ensure Hadoop datanode directory exists
  file: path="{{ hadoop_dir }}/datanode" state=directory owner={{ hadoop_user }} group={{ hadoop_user_groups[0] }} mode=700
  when: inventory_hostname in groups['hadoop-datanode']
  tags: ["hdfs_format"] 

- name: Format namenode
  script: namenode_format.sh
  register: namenode_format
  when: inventory_hostname in groups['hadoop-namenode']
  tags: ["hdfs_format"] 

- include: start-hadoop.yml
  tags: ["hdfs_format"] 

- name: Create HDFS /tmp
  shell: hadoop fs -mkdir -p /tmp
  when: inventory_hostname in groups['hadoop-namenode']
  tags: ["hdfs_format"] 

- name: Create HDFS /var
  shell: hadoop fs -mkdir -p /var/log
  when: inventory_hostname in groups['hadoop-namenode']
  tags: ["hdfs_format"] 

- name: Create HDFS /user dirs
  shell: hadoop fs -mkdir -p /user/history
  when: inventory_hostname in groups['hadoop-namenode']
  tags: ["hdfs_format"] 

- name: Set HDFS permissions
  shell: hadoop fs -chmod -R 1777 /tmp
  when: inventory_hostname in groups['hadoop-namenode']
  tags: ["hdfs_format"] 
- name: Set HDFS permissions
  shell: hadoop fs -chmod -R 1777 /var
  when: inventory_hostname in groups['hadoop-namenode']
  tags: ["hdfs_format"] 
- name: Set HDFS permissions
  shell: hadoop fs -chmod -R 1777 /user
  when: inventory_hostname in groups['hadoop-namenode']
  tags: ["hdfs_format"] 

- name: Create HDFS home dirs for users
  shell: "hadoop fs -mkdir -p /user/{{ item }} ; hadoop fs -chown {{ item }}:{{ item }} /user/{{ item }} ; hadoop fs -chmod -R 755 /user/{{ item }}"
  with_items: "{{ hadoop_users }}"
  when: inventory_hostname in groups['hadoop-namenode']
  tags: ["hdfs_format"] 

- include: stop-hadoop.yml
  tags: ["hdfs_format"] 
